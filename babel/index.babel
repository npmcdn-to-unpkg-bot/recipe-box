
var ModalRecipeNameTextArea = React.createClass({
  
  handleChange: function(event) {
    this.props.nameTextAreaChanged(event);
  },
  
  render: function () {
    
    return (
      <input
        id="modalNameText"
        type="text"
        placeholder="Recipe Name" 
        value={this.props.nameTextAreaContents} 
        onChange={this.handleChange} />
    );
  }
});

var ModalIngredientsTextArea = React.createClass({
  
  handleChange: function(event) {
    this.props.ingredTextAreaChanged(event);
  },
  
  render: function () {
    
    return (
      <textarea
        id="modalIngredientsText"
        rows="3"
        cols="30"
        placeholder="Enter ingredients separated by commmas."
        value={this.props.ingredientsTextAreaContents} 
        onChange={this.handleChange} >
      </textarea>
    );
  }
});

var ModalAddButton = React.createClass({
  
  handleModalAddButton: function () {
    this.props.modalAddButtonClicked();
  },
  
  render: function () {
    
    return (
      <input
        id="modalAddButton"
        type="button"
        onClick={this.handleModalAddButton}
        value="Add" />
    );
  }
});

var ModalEditButton = React.createClass({
  
  handleModalEditButton: function () {
    this.props.modalEditButtonClicked();
  },
  render: function () {

    return (
      <input
        id="modalEditButton"
        type="button"
        onClick={this.handleModalEditButton}
        value="Edit" />
    );
  }
});

var ModalCancelButton = React.createClass({
  
  handleCancelRecipe: function () {
    this.props.cancelButtonClicked();
  },
  
  render: function () {
    
    return (
      <input
        id="modalCancelButton"
        type="button"
        onClick={this.handleCancelRecipe}
        value="Cancel" />
    );
  }
});

var ModalXButton = React.createClass({
  
  handleXButton: function () {
    this.props.xButtonClicked();
  },
  
  render: function () {
    
    return (
      <input
        className="xButton"
        type="button"
        onClick={this.handleXButton}
        value="x" />
    );
  }
});

var AddRecipeModalContent = React.createClass({
  render: function () {
    
    return (
      
      <div className="modal-content" >
        <ModalXButton
          xButtonClicked={this.props.xButtonClicked} />
        <h2>Add Recipe</h2>
        <h3 className="modalRecipeTitleText">Recipe Name</h3>
        <ModalRecipeNameTextArea 
          nameTextAreaContents={this.props.nameTextAreaContents}
          nameTextAreaChanged={this.props.nameTextAreaChanged} />
        <h3 className="modalIngredientsTitleText">Ingredients</h3>
        <ModalIngredientsTextArea
          ingredientsTextAreaContents={this.props.ingredientsTextAreaContents}
          ingredTextAreaChanged={this.props.ingredTextAreaChanged} />
        <div className="modalButtons">
          <ModalAddButton modalAddButtonClicked={this.props.modalAddButtonClicked} />
          <ModalCancelButton 
            cancelButtonClicked={this.props.cancelButtonClicked} />
        </div>
      </div>
    );
  }
});

var EditRecipeModalContent = React.createClass({
  render: function () {
    
    return (
      
      <div className="modal-content" >
        <ModalXButton
          xButtonClicked={this.props.xButtonClicked} />
        <h2>Edit Recipe</h2>
        <h3 className="modalRecipeTitleText">Recipe</h3>
        <ModalRecipeNameTextArea 
          nameTextAreaContents={this.props.nameTextAreaContents}
          nameTextAreaChanged={this.props.nameTextAreaChanged} />
        <h3 className="modalIngredientsTitleText">Ingredients</h3>
        <ModalIngredientsTextArea
          ingredientsTextAreaContents={this.props.ingredientsTextAreaContents}
          ingredTextAreaChanged={this.props.ingredTextAreaChanged} />
        <div className="modalButtons">
          <ModalEditButton modalEditButtonClicked={this.props.modalEditButtonClicked} />
          <ModalCancelButton 
            cancelButtonClicked={this.props.cancelButtonClicked} />
        </div>
      </div>
    );
  }
});

var ModalBackground = React.createClass({
  render: function () {
    var addOrEditModal = this.props.addOrEditModal;
    
    if (addOrEditModal === "add") { 
      return (

        <div className="modal" style={this.props.modalStatus} >
          <AddRecipeModalContent
            modalAddButtonClicked={this.props.modalAddButtonClicked}
            xButtonClicked={this.props.xButtonClicked}
            cancelButtonClicked={this.props.cancelButtonClicked}
            ingredientsTextAreaContents={this.props.ingredientsTextAreaContents}
            ingredTextAreaChanged={this.props.ingredTextAreaChanged} 
            nameTextAreaContents={this.props.nameTextAreaContents}
            nameTextAreaChanged={this.props.nameTextAreaChanged} />
        </div>
      );
    }
    else if (addOrEditModal === "edit") {
      return (

        <div className="modal" style={this.props.modalStatus} >
          <EditRecipeModalContent
            modalEditButtonClicked={this.props.modalEditButtonClicked}
            xButtonClicked={this.props.xButtonClicked}
            cancelButtonClicked={this.props.cancelButtonClicked}
            ingredientsTextAreaContents={this.props.ingredientsTextAreaContents}
            ingredTextAreaChanged={this.props.ingredTextAreaChanged} 
            nameTextAreaContents={this.props.nameTextAreaContents}
            nameTextAreaChanged={this.props.nameTextAreaChanged} />
        </div>
      );
    }
  }
});

var IndividualRecipeButton = React.createClass({
  
  handleIndivRecButtonClicked: function () {
    var index = this.props.index;
    this.props.indivRecipeButtonClicked(index);
  },
  
  render: function () {
    var recipeName = this.props.name;
    
    return (
      <div className="recipeButtonsDiv">
        <input
          className="recipeButtons"
          type="button"
          onClick={this.handleIndivRecButtonClicked}
          value={recipeName} />
      </div>
    );
  }
});

var IndividualIngredient = React.createClass({
  render: function () {
    var ingredientName = this.props.ingredientName;
    return (
      <div class="cell">{ingredientName}</div>
    );
  }
});

var IngredientList = React.createClass({
  render: function () {
    var ingredientsArr = this.props.ingredients;
    var ingredientsWithHtml = [];
    for (let i=0; i<ingredientsArr.length; i++) {
      ingredientsWithHtml.push(
        <IndividualIngredient
          ingredientName={ingredientsArr[i]}
          key={i} />
      ); 
    }
    
    return (
      <div>{ingredientsWithHtml}</div>
    );
  }
});

var DeleteButton = React.createClass({
  
  handleDeleteButton: function () {
    var index = this.props.index;
    this.props.deleteButtonClicked(index);
  },
  
  render: function () {
    
    return (
      <input
        className="deleteButton"
        type="button"
        onClick={this.handleDeleteButton}
        value="Delete" />
    );
  }
});

var EditButton = React.createClass({
  
  handleEditRecipe: function () {
    var ind = this.props.index;
    this.props.editRecipeClicked(ind);
  },
  
  render: function () {
    
    return (
      <input
        className="editButton"
        type="button"
        onClick={this.handleEditRecipe}
        value="Edit" />
    );
  }
});

var RecipeWithTitleAndButtons = React.createClass({
  render: function () {
    var name = this.props.data.name;
    var ingredients = this.props.data.ingredients;
    var idName = "recipeDiv" + this.props.index;
    return (
      <div className="individualRecipeFullDiv">
        <div className="individualRecipeTitleDiv">
          <IndividualRecipeButton
            name={name}
            index={this.props.index}
            indivRecipeButtonClicked={this.props.indivRecipeButtonClicked} />
        </div>
        <div
          className={this.props.hideOrNot ? 'hide' : 'nohide'}
          id={idName} >
          <h3 id="ingredientsText">Ingredients</h3>
          <IngredientList ingredients={ingredients}/>
          <DeleteButton
            index={this.props.index}
            deleteButtonClicked={this.props.deleteButtonClicked} />
          <EditButton
            editRecipeClicked={this.props.editRecipeClicked}
            index={this.props.index} />
        </div>
      </div>
    );
  }
});

var AddRecipeButton = React.createClass({
  
  handleAddRecipe: function () {
    this.props.addRecipeClicked();
  },
  
  render: function () {
    
    return (
      <input
        id="addRecipeButton"
        type="button"
        onClick={this.handleAddRecipe}
        value="Add Recipe" />
    );
  }
});

var FullRecipeBox = React.createClass({
  
  getInitialState: function() {
    
    var defaultData = [
        {
          ingredients: ["Ingredient 1", "Ingredient 2", "Ingredient 3"],
          name: "Recipe1"
        },
        {
          ingredients: ["Ingredient 1", "Ingredient 2", "Ingredient 3"],
          name: "Recipe2"
        },
        {
          ingredients: ["Ingredient 1", "Ingredient 2", "Ingredient 3"],
          name: "Recipe3"
        }
      ];
    
    // Use this to delete all recipes and clear the local storage
    // localStorage.setItem('_instantMizu_recipes', null);
    var localData = JSON.parse(localStorage.getItem('_instantMizu_recipes'));
    if (localData === null || localData.length === 0) {
      console.log("adsf");
      localStorage.setItem('_instantMizu_recipes', JSON.stringify(defaultData));
      console.log(localStorage.getItem('_instantMizu_recipes'));
    }
    
    localData = JSON.parse(localStorage.getItem('_instantMizu_recipes'));
    
    var hiddenArr = [];
    for (let i=0; i<Object.keys(localData).length; i++) {
      hiddenArr.push(true);
    }
    
    return {
      index: 0,
      addOrEditModal: "add",
      nameTextAreaContents: "",
      ingredientsTextAreaContents: "",
      modalStatus: {display: "none"},
      data: localData,
      hiddenStatus: hiddenArr
    };
  },
    
  componentWillMount: function() {
    document.addEventListener("keydown", this.handleEscapeKey, false);
  },
  
  componentWillUnmount: function() {
    document.removeEventListener("keydown", this.handleEscapeKey, false);
  },
                                      
  addRecipeClicked: function () {
    this.setState({
      addOrEditModal: "add",
      modalStatus: {display: "block"},
      nameTextAreaContents: "",
      ingredientsTextAreaContents: "",
    });
  },
    
  editRecipeClicked: function (ind) {
    var name = this.state.data[ind].name;
    var ingredients = this.state.data[ind].ingredients.join(", ");
    this.setState({
      index: ind,
      addOrEditModal: "edit",
      modalStatus: {display: "block"},
      nameTextAreaContents: name,
      ingredientsTextAreaContents: ingredients,
    });
  },
  
  xButtonClicked: function () {
    this.setState({
      modalStatus: {display: "none"}
    });
  },
    
  cancelButtonClicked: function () {
    this.setState({
      modalStatus: {display: "none"}
    });
  },
    
  modalAddButtonClicked: function () {
    var newRecipe = {};
    newRecipe.name = this.state.nameTextAreaContents;
    var re = /\s*,\s*/;
    newRecipe.ingredients = this.state.ingredientsTextAreaContents.split(re);
    var recipeList = this.state.data;
    recipeList.push(newRecipe);
    // console.log(recipeList);
    localStorage.setItem('_instantMizu_recipes', JSON.stringify(recipeList));
    
    var hiddenStatusArr = this.state.hiddenStatus;
    hiddenStatusArr.push(true);
    
    this.setState({
      modalStatus: {display: "none"},
      data: recipeList,
      hiddenStatus: hiddenStatusArr
    });
  },
    
  modalEditButtonClicked: function () {
    var index = this.state.index;
    var newRecipe = {};
    newRecipe.name = this.state.nameTextAreaContents;
    var re = /\s*,\s*/;
    newRecipe.ingredients = this.state.ingredientsTextAreaContents.split(re);
    var recipeList = this.state.data;
    recipeList[index] = newRecipe;
    localStorage.setItem('_instantMizu_recipes', JSON.stringify(recipeList));
    
    this.setState({
      modalStatus: {display: "none"},
      data: recipeList
    });
  },
    
  deleteButtonClicked: function (index) {
    var updatedData = this.state.data;
    updatedData.splice(index, 1);
    localStorage.setItem('_instantMizu_recipes', JSON.stringify(updatedData));
    
    var hiddenStatusArr = this.state.hiddenStatus;
    for (let i=0; i<hiddenStatusArr.length; i++) {
      hiddenStatusArr[i] = true;
    }
    
    this.setState({
      data: updatedData,
      hiddenStatus: hiddenStatusArr
    });
  },
    
  nameTextAreaChanged: function(event) {
    this.setState({
      nameTextAreaContents: event.target.value
    })
  },
    
  ingredTextAreaChanged: function(event) {
    this.setState({
      ingredientsTextAreaContents: event.target.value
    })
  },
  
  indivRecipeButtonClicked: function(index) {
    var hiddenStatusArr = this.state.hiddenStatus;
    if (hiddenStatusArr[index] === false) {
      hiddenStatusArr[index] = true;
    }
    else {
      for (let i=0; i<hiddenStatusArr.length; i++) {
        if (i === index) {
          hiddenStatusArr[i] = false;
        }
        else {
          hiddenStatusArr[i] = true;
        }
      }
    }
    this.setState({
      hiddenStatus: hiddenStatusArr
    })
    
  },
    
  handleEscapeKey: function(e) {
    if (e.keyCode === 27) {
      this.setState({
        modalStatus: {display: "none"}
      });
    }
  },
  
  render: function () {
    var recipes = [];
    for (let i=0; i<this.state.data.length; i++) {
      var currentData = this.state.data[i];
      var hidden = this.state.hiddenStatus[i];
      recipes.push(
        <RecipeWithTitleAndButtons
          data={currentData} 
          index={i}
          deleteButtonClicked={this.deleteButtonClicked}
          editRecipeClicked={this.editRecipeClicked}
          indivRecipeButtonClicked={this.indivRecipeButtonClicked}
          hideOrNot={hidden}
          key={i} />
      );  
    }
    
    return (
      <div>
        <ModalBackground
          modalStatus={this.state.modalStatus}
          modalAddButtonClicked={this.modalAddButtonClicked}
          modalEditButtonClicked={this.modalEditButtonClicked}
          xButtonClicked={this.xButtonClicked}
          cancelButtonClicked={this.cancelButtonClicked}
          ingredientsTextAreaContents={this.state.ingredientsTextAreaContents}
          ingredTextAreaChanged={this.ingredTextAreaChanged}
          nameTextAreaContents={this.state.nameTextAreaContents}
          nameTextAreaChanged={this.nameTextAreaChanged}
          addOrEditModal={this.state.addOrEditModal} />
        <div id="addRecipeButtonDiv">
          <AddRecipeButton
            modalStatus={this.state.modalStatus}
            addRecipeClicked={this.addRecipeClicked} />
        </div>
        <div id="mainRecipesDiv">
          {recipes}
        </div>
      </div>
    );
  }
});

ReactDOM.render(
  <FullRecipeBox />,
  document.getElementById('app')
);